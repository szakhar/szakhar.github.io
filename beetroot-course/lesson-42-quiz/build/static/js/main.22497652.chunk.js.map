{"version":3,"sources":["components/ActiveQuiz/AnswersList/AnswersItem/AnswersItem.js","components/ActiveQuiz/AnswersList/AnswersList.js","components/UI/Button/Button.js","components/ActiveQuiz/ActiveQuiz.js","components/ResultQuiz/ResultQuiz.js","components/UI/InfoMessage/InfoMessage.js","containers/Quiz/Quiz.js","App.js","serviceWorker.js","index.js"],"names":["AnswersItem","props","className","type","name","id","answer","onChange","activeAnswer","keyAnswer","value","htmlFor","AnswersList","answers","map","index","key","Button","typeButton","onClick","classButton","disabled","children","ActiveQuiz","onSubmit","nextQuestion","activeQuestion","question","quizLength","isDisabledButton","ResultQuiz","correctAnswers","onRetry","InfoMessage","style","width","marginTop","message","error","Quiz","state","isFinished","nextQuestionHandler","event","preventDefault","data","correct_answers","target","setState","Object","keys","items","length","checked","onActiveAnswerHandler","onRetryHandler","fetch","then","res","json","result","isLoaded","values","this","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","console"],"mappings":"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","file":"static/js/main.22497652.chunk.js","sourcesContent":["import React from 'react'\n\nconst AnswersItem = props => {\n  return (\n    <li className=\"list-group-item pl-3\">\n        <div className=\"form-check\">\n            <input\n              className=\"form-check-input\"\n              type=\"radio\"\n              name=\"answer\"\n              id={props.answer}\n              onChange={() => props.activeAnswer(props.keyAnswer)}\n              value={props.answer}\n            />\n            <label className=\"form-check-label\" htmlFor={props.answer}>\n              {props.answer}\n            </label>\n        </div>\n    </li>\n  )\n}\n\nexport default AnswersItem","import React from 'react'\nimport AnswersItem from './AnswersItem/AnswersItem'\n\nconst AnswersList = props => {\n  return (\n    <ul className=\"list-group list-group-flush ml-3 mr-3\">\n      { props.answers.map((answer, index) => {\n        return (\n          <AnswersItem\n            key={index}\n            keyAnswer={index}\n            answer={answer}\n            activeAnswer={props.activeAnswer}\n          />\n        )\n      }) }\n    </ul>\n  )\n}\n\nexport default AnswersList","import React from 'react'\n\nconst Button = props => {\n  return (\n    <button\n      type={props.typeButton}\n      onClick={props.onClick}\n      className={props.classButton}\n      disabled={props.disabled}\n    >\n      {props.children}\n    </button>\n  )\n}\n\nexport default Button","import React from 'react'\nimport AnswersList from './AnswersList/AnswersList'\nimport Button from '../UI/Button/Button'\n\nconst ActiveQuiz = props => {\n  return (\n    <form onSubmit={props.nextQuestion}>\n      <div className=\"card-body\">\n        <p className=\"card-text font-weight-bold mb-1\">Запитання №{props.activeQuestion}</p>\n        <p className=\"card-text\">{props.question.question}</p>\n      </div>\n\n      <AnswersList\n        answers={props.answers}\n        activeAnswer={props.activeAnswer}\n      />\n      \n      <div className=\"card-body d-flex justify-content-end align-items-center mb-1\">\n          <div className=\"mr-3\">{props.activeQuestion}/{props.quizLength}</div>\n          <Button\n            classButton=\"btn btn-dark\"\n            typeButton=\"submit\"\n            disabled={props.isDisabledButton}\n          >\n            Продовжити\n          </Button>\n      </div>\n    </form>\n  )\n}\n\nexport default ActiveQuiz","import React from 'react'\nimport Button from '../UI/Button/Button'\n\nconst ResultQuiz = props => {\n  return (\n    <>\n      <div className=\"card-body mt-n3\">\n        <hr/>\n        <h4 className=\"card-text font-weight-bold mt-5 mb-2 text-center\">Ваш результат</h4>\n        <p className=\"card-text text-center display-2 font-weight-lighter\">{ (props.correctAnswers / props.quizLength) * 100 }%</p>\n        <p className=\"text-center text-black-50\">Ви дали {props.correctAnswers}/{props.quizLength} правильних відповіді</p>\n        <hr className=\"mt-5\"/>\n      </div>\n      <div className=\"card-body d-flex justify-content-center align-items-center mb-3 mt-n3\">\n        <Button\n          classButton=\"btn btn-dark\"\n          typeButton=\"button\"\n          onClick={props.onRetry}\n          disabled={props.isDisabledButton}\n        >\n          Пройти ще раз\n        </Button>\n      </div>\n    </>\n  )\n}\n\nexport default ResultQuiz","import React from 'react'\n\nconst InfoMessage = props => {\n  return (\n    <div className=\"row\">\n      <div className=\"card col-11 col-lg-7 col-md-10 col-sm-12 col-xs-12 mx-auto pl-2 pr-2 mb-5\" style={{width: '18rem', marginTop: '60px'}}>\n          <div className=\"card-body\">\n            <h4 className=\"card-title mt-2\">{props.message}{props.error ? props.error : ''}</h4>\n          </div>\n      </div>\n    </div>\n  )\n}\n\nexport default InfoMessage","import React from 'react'\n// import data from '../../data/Questions.json'\nimport ActiveQuiz from '../../components/ActiveQuiz/ActiveQuiz'\nimport ResultQuiz from '../../components/ResultQuiz/ResultQuiz'\nimport InfoMessage from '../../components/UI/InfoMessage/InfoMessage'\n\nclass Quiz extends React.Component {\n\n  state = {\n    isFinished: false,\n    activeQuestion: 1,\n    correctAnswers: 0,\n    activeAnswer: 0,\n    isDisabledButton: true\n  }\n\n\n  // Load json from API\n  componentDidMount() {\n    fetch(\"data/Questions.json\")\n      .then(res => res.json())\n      .then(\n        (result) => {\n          this.setState({\n            isLoaded: true,\n            items: result,\n            data: Object.values(result)\n          })\n        },\n        (error) => {\n          this.setState({\n            isLoaded: true,\n            error\n          })\n        }\n      )\n  }\n\n\n  nextQuestionHandler = event => {\n    event.preventDefault();\n\n    const correctAnswer = this.state.data[this.state.activeQuestion - 1].correct_answers[0]\n\n    if (correctAnswer === event.target.answer.value) {\n      this.setState({\n        correctAnswers: this.state.correctAnswers + 1\n      })\n    }\n\n    if (this.state.activeQuestion < Object.keys(this.state.items).length) {\n      this.setState({\n        activeQuestion: this.state.activeQuestion + 1\n      })\n    } else {\n      this.setState({\n        isFinished: true\n      })\n    }\n\n    // Reset checkbox checket\n    event.target.answer[this.state.activeAnswer].checked = false\n\n    // Disabled Button\n    this.setState({isDisabledButton: true})\n  }\n\n\n  // Active Answer Key\n  onActiveAnswerHandler = key => {\n    this.setState({\n      activeAnswer: key,\n      isDisabledButton: false\n    })\n  }\n\n\n  onRetryHandler = () => {\n    this.setState({\n      isFinished: false,\n      activeQuestion: 1,\n      correctAnswers: 0,\n      activeAnswer: 0,\n      isDisabledButton: true\n    })\n  }\n\n\n  render() {\n    const { error, isLoaded, items } = this.state\n\n    if (error) {\n      return (\n        <InfoMessage\n          message=\"Помилка: \"\n          error={error.message}\n        />\n      )\n    } else if (!isLoaded) {\n      return (\n        <InfoMessage\n          message=\"Завантаження...\"\n        />\n      )\n    } else {\n      return (\n        <div className=\"row\">\n          <div className=\"card col-11 col-lg-7 col-md-10 col-sm-12 col-xs-12 mx-auto pl-2 pr-2 mb-5\" style={{width: '18rem', marginTop: '60px'}}>\n              <div className=\"card-body\">\n                <h1 className=\"card-title font-weight-bold mt-2 mb-n3\">Наскільки ти кіберспортивний експерт</h1>\n              </div>\n              \n              {\n                this.state.isFinished\n                  ? <ResultQuiz\n                      correctAnswers={this.state.correctAnswers}\n                      quizLength={Object.keys(items).length}\n                      onRetry={this.onRetryHandler}\n                    />\n                  : <ActiveQuiz\n                      question={items['question_' + this.state.activeQuestion]}\n                      answers={items['question_' + this.state.activeQuestion].answers}\n                      activeQuestion={this.state.activeQuestion}\n                      quizLength={Object.keys(items).length}\n                      nextQuestion={this.nextQuestionHandler}\n                      activeAnswer={this.onActiveAnswerHandler}\n                      isDisabledButton={this.state.isDisabledButton}\n                    />\n              }\n          </div>\n        </div>\n      )\n    }\n  }\n}\n\nexport default Quiz","import React from 'react'\nimport Quiz from './containers/Quiz/Quiz'\n\nfunction App() {\n  return (\n    <div className=\"container\">\n      <Quiz/>\n    </div>\n  )\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport './index.scss'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}