{"version":3,"sources":["List/List.scss","List/Item/Item.scss","App.scss","List/AddItem/AddItem.scss","List/Item/Item.js","List/AddItem/AddItem.js","List/List.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Item","props","Fragment","list","map","item","index","cls","classes","complete","push","Complete","className","join","key","onClick","onClickComplete","title","Trash","onClickDelete","AddItem","onChange","onChangeInput","onKeyPress","onAddItem","type","value","inputValue","placeholder","List","state","completeHandler","id","concat","setState","deleteHandler","splice","changeInputHandler","event","target","addItemHandler","length","this","ListBox","Empty","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"8FACAA,EAAOC,QAAU,CAAC,KAAO,0BAA0B,QAAU,wBAAwB,MAAQ,0B,gBCA7FD,EAAOC,QAAU,CAAC,KAAO,wBAAwB,SAAW,wBAAwB,MAAQ,4B,mBCA5FD,EAAOC,QAAU,CAAC,IAAM,0B,kBCAxBD,EAAOC,QAAU,CAAC,QAAU,0B,8NCqCbC,EAnCF,SAAAC,GAGT,OACI,kBAAC,IAAMC,SAAP,KACMD,EAAME,KAAKC,KAAI,SAACC,EAAMC,GACpB,IAAMC,EAAM,CAACC,IAAQR,MAMrB,OAJIC,EAAME,KAAKG,GAAOG,UAClBF,EAAIG,KAAKF,IAAQG,UAIjB,wBACIC,UAAWL,EAAIM,KAAK,KACpBC,IAAKR,GAEL,0BACIS,QAAS,kBAAMd,EAAMe,gBAAgBV,KAEpCD,EAAKY,OAEV,0BACIL,UAAWJ,IAAQU,MACnBH,QAAS,kBAAMd,EAAMkB,cAAcb,KAEnC,uBAAGM,UAAU,uB,gBCX1BQ,EAfC,SAAAnB,GACd,OACE,yBAAKW,UAAWJ,IAAQY,SACtB,2BACEC,SAAUpB,EAAMqB,cAChBC,WAAYtB,EAAMuB,UAClBC,KAAK,OACLC,MAAOzB,EAAM0B,WACbC,YAAY,cAEd,4BAAQb,QAASd,EAAMuB,WAAvB,SCqESK,E,4MA3EXC,MAAQ,CACNH,WAAY,GACZxB,KAAM,CACF,CAACc,MAAO,YAAaR,UAAU,GAC/B,CAACQ,MAAO,UAAWR,UAAU,GAC7B,CAACQ,MAAO,UAAWR,UAAU,GAC7B,CAACQ,MAAO,kBAAmBR,UAAU,GACrC,CAACQ,MAAO,UAAWR,UAAU,K,EAInCsB,gBAAkB,SAAAC,GAEd,IAAM7B,EAAO,EAAK2B,MAAM3B,KAAK8B,SAE7B9B,EAAK6B,GAAIvB,UAAY,EAAKqB,MAAM3B,KAAK6B,GAAIvB,SAEzC,EAAKyB,SAAS,CAAC/B,U,EAGnBgC,cAAgB,SAAAH,GAEZ,IAAM7B,EAAI,YAAO,EAAK2B,MAAM3B,MAC5BA,EAAKiC,OAAOJ,EAAI,GAEhB,EAAKE,SAAS,CAAC/B,U,EAGnBkC,mBAAqB,SAAAC,GAEjB,EAAKJ,SAAS,CACZP,WAAYW,EAAMC,OAAOb,S,EAI/Bc,eAAiB,SAAAF,GAEb,GAA8B,KAA1B,EAAKR,MAAMH,YAAqB,EAAKG,MAAMH,WAAWc,QAAU,KAC3DH,EAAMxB,KAAqB,UAAdwB,EAAMxB,MAAqBwB,EAAMxB,KAAK,CACpD,IAAMX,EAAI,YAAO,EAAK2B,MAAM3B,MAC5BA,EAAKO,KAAK,CAACO,MAAO,EAAKa,MAAMH,WAAYlB,UAAU,IAEnD,EAAKyB,SAAS,CACV/B,KAAMA,EACNwB,WAAY,O,uDAOxB,OACI,kBAAC,IAAMzB,SAAP,KACI,kBAAC,EAAD,CACIsB,UAAWkB,KAAKF,eAChBlB,cAAeoB,KAAKL,mBACpBV,WAAYe,KAAKZ,MAAMH,aAE3B,yBAAKf,UAAWJ,IAAQmC,SACjBD,KAAKZ,MAAM3B,KAAKsC,OAEjB,wBAAI7B,UAAWJ,IAAQqB,MACjB,kBAAC,EAAD,CACI1B,KAAMuC,KAAKZ,MAAM3B,KACjBa,gBAAiB0B,KAAKX,gBACtBZ,cAAeuB,KAAKP,iBAL9B,yBAAKvB,UAAWJ,IAAQoC,OAAxB,+B,GA9DHC,IAAMC,WCQVC,MATf,WACE,OACE,yBAAKnC,UAAWJ,IAAQuC,KACtB,4CACA,kBAAC,EAAD,QCIcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.5495d4fd.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"List\":\"_2svF87cJjbkM_5ZlD68JKA\",\"ListBox\":\"TXreM4fode_L05_nZq-5J\",\"Empty\":\"Q72mSBIr8Acul3Jfn835T\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"Item\":\"WB8OUw14T3lzgIOc420LU\",\"Complete\":\"G-U7zH8bvZUUZbRopzNHN\",\"Trash\":\"_3mZkKqXo3AhXDvgfqMV0jg\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"App\":\"wmyqVrjdc0tU9zQZUhm3L\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"AddItem\":\"AWVKf38qFfMDrB1eLl3O3\"};","import React from 'react'\nimport classes from './Item.scss'\n\nconst Item = props => {\n    // console.log(props.list)\n\n    return (\n        <React.Fragment>\n            { props.list.map((item, index) => {\n                const cls = [classes.Item]\n\n                if (props.list[index].complete) {\n                    cls.push(classes.Complete)\n                }\n\n                return (\n                    <li\n                        className={cls.join(' ')}\n                        key={index}\n                    >\n                        <span\n                            onClick={() => props.onClickComplete(index)}\n                        >\n                            {item.title}\n                        </span>\n                        <span\n                            className={classes.Trash}\n                            onClick={() => props.onClickDelete(index)}\n                        >\n                            <i className=\"fa fa-trash\"/>\n                        </span>\n                    </li>\n                )\n            }) }\n        </React.Fragment>\n    )\n}\n\nexport default Item","import React from 'react'\nimport classes from './AddItem.scss'\n\nconst AddItem = props => {\n  return (\n    <div className={classes.AddItem}>\n      <input\n        onChange={props.onChangeInput}\n        onKeyPress={props.onAddItem}\n        type=\"text\"\n        value={props.inputValue}\n        placeholder=\"Your item\"\n      />\n      <button onClick={props.onAddItem}>Add</button>\n    </div>\n  )\n}\n\nexport default AddItem","import React from 'react'\nimport classes from './List.scss'\nimport Item from './Item/Item'\nimport AddItem from './AddItem/AddItem'\n\nclass List extends React.Component {\n\n    state = {\n      inputValue: '',\n      list: [\n          {title: 'Blueberry', complete: true},\n          {title: 'Avocado', complete: false},\n          {title: 'Almonds', complete: true},\n          {title: 'Cherry tomatoes', complete: true},\n          {title: 'Apricot', complete: false}\n      ]\n    }\n\n    completeHandler = id => {\n        // Клонує масив\n        const list = this.state.list.concat()\n\n        list[id].complete = !this.state.list[id].complete\n\n        this.setState({list})\n    }\n\n    deleteHandler = id => {\n        // Клонує масив\n        const list = [...this.state.list]\n        list.splice(id, 1)\n        // console.log(id)\n        this.setState({list})\n    }\n\n    changeInputHandler = event => {\n        // console.log(event.target.value)\n        this.setState({\n          inputValue: event.target.value\n        })\n      }\n\n    addItemHandler = event => {\n        // console.log(event)\n        if (this.state.inputValue !== '' && this.state.inputValue.length <= 20 ) {\n            if ((event.key && event.key === 'Enter') || !event.key) {\n                const list = [...this.state.list]\n                list.push({title: this.state.inputValue, complete: false})\n\n                this.setState({\n                    list: list,\n                    inputValue: ''\n                })\n            }\n        }\n    }\n  \n    render() {\n        return (\n            <React.Fragment>\n                <AddItem\n                    onAddItem={this.addItemHandler}\n                    onChangeInput={this.changeInputHandler}\n                    inputValue={this.state.inputValue}\n                />\n                <div className={classes.ListBox}>\n                    { !this.state.list.length\n                    ? <div className={classes.Empty}>Your Tasks List Empty</div> \n                    : <ul className={classes.List}>\n                            <Item\n                                list={this.state.list}\n                                onClickComplete={this.completeHandler}\n                                onClickDelete={this.deleteHandler}\n                            />\n                        </ul>\n                    }\n                </div>\n            </React.Fragment>\n        )\n    }\n}\n\nexport default List","import React from 'react';\nimport classes from './App.scss';\nimport List from './List/List'\n\nfunction App() {\n  return (\n    <div className={classes.App}>\n      <h1>Tasks on day</h1>\n      <List/>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}